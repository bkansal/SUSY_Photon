#define Single_elec_cxx
#include "Single_elec.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <iostream>
#include <vector>
#include <cstring>
#include <string>
#include <fstream>

using namespace std;

int main(int argc, char* argv[])
{

  if (argc < 2) {
    cerr << "Please give 3 arguments " << "runList " << " " << "outputFileName" << " " << "dataset" << endl;
    return -1;
  }
  const char *inputFileList = argv[1];
  const char *outFileName   = argv[2];
  const char *data          = argv[3];

  Single_elec ana(inputFileList, outFileName, data);
  cout << "dataset " << data << " " << endl;

  ana.EventLoop(data,inputFileList);

  return 0;
}

void Single_elec::EventLoop(const char *data,const char *inputFileList) {
  if (fChain == 0) return;

  Long64_t nentries = fChain->GetEntriesFast();
  cout << "nentries " << nentries << endl;
  cout << "Analyzing dataset " << data << " " << endl;

  Long64_t nbytes = 0, nb = 0;
  int decade = 0;
  // TTree *newtree = fChain->CloneTree(0);

  TString s_data=data;
  int num=0,deno=0;
  for (Long64_t jentry=0; jentry<nentries;jentry++) {

    // ==============print number of events done == == == == == == == =
    double progress = 10.0 * jentry / (1.0 * nentries);
    int k = int (progress);
    if (k > decade)
      cout << 10 * k << " %" <<endl;
    decade = k;
    // cout<<"j:"<<jentry<<" fcurrent:"<<fCurrent<<endl;
    // ===============read this entry == == == == == == == == == == == 
    Long64_t ientry = LoadTree(jentry);
    if (ientry < 0) break;
    nb = fChain->GetEntry(jentry);   nbytes += nb;
    double wt=1.0;
    double lumiInfb=1.0;
    h_selectBaselineYields_->Fill(0);
    
    TLorentzVector bestPhoton = getBestPhoton();
    // if(bestPhotonIndxAmongPhotons<0) continue;
    // if( (*Photons_hasPixelSeed)[bestPhotonIndxAmongPhotons] > 0.001 ) continue;

    //    bool passTrg = false, passMETTrg = false;

    if(s_data.Contains("2016")) lumiInfb=35.922;
    if(s_data.Contains("2017")) lumiInfb=41.529;
    if(s_data.Contains("2018")) lumiInfb=59.74;

    if(!s_data.Contains("data")){
      wt=Weight*1000.0*lumiInfb;
      double mindr_Pho_genlep=getGenLep(bestPhoton);

      if(s_data=="genprompt" || s_data.Contains("TTG") ){
	if(!hasGenPromptPhoton){
	  if(jentry==0)cout<<"**********processing "<<s_data<<" with non-prompt Gen photon"<<endl;
	}
	else if(hasGenPromptPhoton){
	  if(!(madMinPhotonDeltaR >= 0.5 && mindr_Pho_genlep >=0.5 ))continue;   
	}
      }//Gen prompt
       
      if(s_data=="genprompt" || s_data.Contains("WG")){
	if(!hasGenPromptPhoton){
	  if(jentry==0)cout<<"**********processing "<<s_data<<" with non-prompt Gen photon"<<endl;
	}
	else if(hasGenPromptPhoton){
	  if(!(madMinPhotonDeltaR >= 0.5 && mindr_Pho_genlep >=0.5 ))continue;
	}
      }//Gen prompt                                                                                                                       
        

      if(s_data.Contains("WJets")){
	if(!hasGenPromptPhoton){
	  if(jentry==0)cout<<"**********processing "<<s_data<<" with non-prompt Gen photon"<<endl;
	}
	else if(hasGenPromptPhoton){

	  if(!(madMinPhotonDeltaR < 0.5 || mindr_Pho_genlep < 0.5)) continue;
	}
      }
      if(s_data.Contains("TTJets") || s_data.Contains("TTJets_v17") || s_data.Contains("TTJets2_v17"))
	{
	  if(!hasGenPromptPhoton){

	    if(jentry==0)cout<<"**********processing "<<s_data<<" with non-prompt Gen photon"<<endl;
	  }
	  else if(hasGenPromptPhoton){
	    if(!(madMinPhotonDeltaR < 0.5 || mindr_Pho_genlep < 0.5)) continue;
	  }     
	}//Gen non-prompt

      if(hasGenPromptPhoton && (s_data.Contains("ZG")))
	{
	  if(!(madMinPhotonDeltaR>0.5 && mindr_Pho_genlep>0.5)) continue;
	  //	  if(!(madMinPhotonDeltaR>0.5)) continue;
	}
      if(hasGenPromptPhoton && (s_data.Contains("ZJets")))
	{
	  if((madMinPhotonDeltaR>0.5 && mindr_Pho_genlep>0.5)) continue;
	  //	  if(!(madMinPhotonDeltaR<=0.5)) continue;
	}
      if(hasGenPromptPhoton && (s_data.Contains("DYJets")))
	{
	  if(!(madMinPhotonDeltaR<=0.5 ||  mindr_Pho_genlep<=0.5) ) continue;
	}
      if(hasGenPromptPhoton && (s_data.Contains("GJets")))
	{
	  if(!(madMinPhotonDeltaR>0.4)) continue;
	}
      if(hasGenPromptPhoton && (s_data.Contains("QCD")))
	{
	  if((madMinPhotonDeltaR>0.4 && hasGenPromptPhoton)) continue;
	}
    }


    bool passTrg=false,passPhoTrg=false,passReqTrg=false,passHTxPhoTrg=false;

    if(TriggerPass->size()!=148) continue;
   
    if( (*TriggerPass)[36]==1)         { h_selectBaselineYields_->Fill(1); passTrg = true;}      
    else if( (*TriggerPass)[39]==1)         { h_selectBaselineYields_->Fill(2); passTrg = true;}
    //HT triggers
    else if( (*TriggerPass)[40]==1)         { h_selectBaselineYields_->Fill(3); passTrg = true;}
    // else if( (*TriggerPass)[68]==1)         { h_selectBaselineYields_->Fill(4); passTrg = true;}
    // else if( (*TriggerPass)[69]==1)         { h_selectBaselineYields_->Fill(5); passTrg = true;}
    // else if( (*TriggerPass)[70]==1)         { h_selectBaselineYields_->Fill(6); passTrg = true;}
    // else if( (*TriggerPass)[73]==1)         { h_selectBaselineYields_->Fill(7); passTrg = true;}
    // else if( (*TriggerPass)[74]==1)         { h_selectBaselineYields_->Fill(8); passTrg = true;}
    // else if( (*TriggerPass)[75]==1)         { h_selectBaselineYields_->Fill(9); passTrg = true;}
    // else if( (*TriggerPass)[81]==1)         { h_selectBaselineYields_->Fill(10); passTrg = true;}
    // else if( (*TriggerPass)[85]==1)         { h_selectBaselineYields_->Fill(11); passTrg = true;}
    // else if( (*TriggerPass)[89]==1)         { h_selectBaselineYields_->Fill(12); passTrg = true;}
    // else if( (*TriggerPass)[92]==1)         { h_selectBaselineYields_->Fill(13); passTrg = true;}
    // else if( (*TriggerPass)[93]==1)         { h_selectBaselineYields_->Fill(14); passTrg = true;}
    // else if( (*TriggerPass)[94]==1)         { h_selectBaselineYields_->Fill(15); passTrg = true;}
    // else if( (*TriggerPass)[96]==1)         { h_selectBaselineYields_->Fill(16); passTrg = true;}
    // else if( (*TriggerPass)[97]==1)         { h_selectBaselineYields_->Fill(17); passTrg = true;}
    // else if( (*TriggerPass)[100]==1)         { h_selectBaselineYields_->Fill(18); passTrg = true;}
    // else if( (*TriggerPass)[103]==1)         { h_selectBaselineYields_->Fill(19); passTrg = true;}
    // else if( (*TriggerPass)[104]==1)         { h_selectBaselineYields_->Fill(20); passTrg = true;}
    // else if( (*TriggerPass)[105]==1)         { h_selectBaselineYields_->Fill(21); passTrg = true;}
    //Jet triggers
    // else if( (*TriggerPass)[106]==1)         { h_selectBaselineYields_->Fill(22); passTrg = true;}
    // else if( (*TriggerPass)[107]==1)         { h_selectBaselineYields_->Fill(23); passTrg = true;}
    // else if( (*TriggerPass)[108]==1)         { h_selectBaselineYields_->Fill(24); passTrg = true;}


      //      if( trgName.Contains("HLT_Ele27_WPTight_Gsf_v") && (*TriggerPass)[i]==1 )         { h_selectBaselineYields_->Fill(1); passTrg = true;}
      //      else if( trgName.Contains("HLT_Ele30_WPTight_Gsf_v") && (*TriggerPass)[i]==1 )         { h_selectBaselineYields_->Fill(2); passTrg = true;}
      //      else if( trgName.Contains("HLT_Ele32_WPTight_Gsf_v") && (*TriggerPass)[i]==1 )         { h_selectBaselineYields_->Fill(3); passTrg = true;}

      //------------------first trial for MET triggers efficiency-------------------------------------------//
    
    if( (*TriggerPass)[124]==1 && (*TriggerPrescales)[124]==1 )      { h_selectBaselineYields_->Fill(24); passReqTrg = true;}
    else if( (*TriggerPass)[110]==1 && (*TriggerPrescales)[110]==1 )      { h_selectBaselineYields_->Fill(25); passReqTrg = true;}    
    else if( (*TriggerPass)[112]==1 && (*TriggerPrescales)[112]==1 )      { h_selectBaselineYields_->Fill(26); passReqTrg = true;}
    else if( (*TriggerPass)[116]==1 && (*TriggerPrescales)[116]==1 )      { h_selectBaselineYields_->Fill(27); passReqTrg = true;}
    else if( (*TriggerPass)[118]==1 && (*TriggerPrescales)[118]==1 )      { h_selectBaselineYields_->Fill(28); passReqTrg = true;}
    else if( (*TriggerPass)[120]==1 && (*TriggerPrescales)[120]==1 )      { h_selectBaselineYields_->Fill(29); passReqTrg = true;}
    
    /*
    if( (*TriggerPass)[124]==1) { h_selectBaselineYields_->Fill(24); passReqTrg = true;}
    else if( (*TriggerPass)[110]==1)      { h_selectBaselineYields_->Fill(25); passReqTrg = true;}
    else if( (*TriggerPass)[112]==1)      { h_selectBaselineYields_->Fill(26); passReqTrg = true;}
    else if( (*TriggerPass)[116]==1)      { h_selectBaselineYields_->Fill(27); passReqTrg = true;}
    else if( (*TriggerPass)[118]==1)      { h_selectBaselineYields_->Fill(28); passReqTrg = true;}
    else if( (*TriggerPass)[120]==1)      { h_selectBaselineYields_->Fill(29); passReqTrg = true;}
    */
    //      else if( trgName.Contains("HLT_PFHT300_PFMET100") && (*TriggerPass)[i]==1 )      { h_selectBaselineYields_->Fill(10); passReqTrg = true;}//passHTxPhoTrg = true;}
    //   else if( trgName.Contains("HLT_PFHT300_PFMET110") && (*TriggerPass)[i]==1 )      { h_selectBaselineYields_->Fill(11); passReqTrg = true;}//passHTxPhoTrg = true;}

  
    //    if(!passTrg) continue;
    //    if(HT<800) continue;
    //    if()
    if(HBHENoiseFilter != 1 || HBHEIsoNoiseFilter != 1 || eeBadScFilter != 1 || EcalDeadCellTriggerPrimitiveFilter != 1 || BadChargedCandidateFilter != 1 || BadPFMuonFilter != 1) continue;
    if(PFCaloMETRatio > 5) continue;
    //    if(MET/CaloMET > 2.0) continue;


    //    cout<<"No photon "<<endl;
    /*
    int proxyJetIdx = -100;
    double proxyJetPhoFrac = 0.0;
    bool isProxyPho = false;
    for(int i=0;i<Jets->size();i++){
      if((*Jets)[i].Pt() < 100 || abs((*Jets)[i].Eta()) > 2.4 || (*Jets_photonEnergyFraction)[i] < 0.0) continue;
      if(abs((*Jets)[i].Eta()) > 1.4442 && abs((*Jets)[i].Eta()) < 1.566) continue;
      if(proxyJetPhoFrac < (*Jets_photonEnergyFraction)[i]){
	proxyJetPhoFrac = (*Jets_photonEnergyFraction)[i];
	proxyJetIdx = i;
      }
    }
    if(proxyJetIdx >= 0) bestPhoton = (*Jets)[proxyJetIdx];
    isProxyPho = true;
    
    if(!isProxyPho) continue;//reject event if no proxy is found in VR
    */
    if(bestPhoton.Pt()<100) continue;

    bool hadJetID=false;
    //----------------------if we are also using HT X Photon triggers------------------------
    int minDRindx=-100,photonMatchingJetIndx=-100,nHadJets=0;
    double minDR=99999,ST=0;
    vector<TLorentzVector> hadJets;

    for(int i=0;i<Jets->size();i++){
      if( ((*Jets)[i].Pt() > 30.0) && (abs((*Jets)[i].Eta()) <= 2.4) ){
	double dR=bestPhoton.DeltaR((*Jets)[i]);
	if(dR<minDR){minDR=dR;minDRindx=i;}
      }
    }
    
    
    for(int i=0;i<Jets->size();i++){
	if( ((*Jets)[i].Pt() > 30.0) && (abs((*Jets)[i].Eta()) <= 2.4) ){
	  if( !(minDR < 0.3 && i==minDRindx) ){
	    hadJetID=(*Jets_ID)[i];
	    if(hadJetID) hadJets.push_back((*Jets)[i]);	    
	    //	      if((*Jets_ID)[i]) cout<<"No photon "<<endl;

	  }
	}
    }
    if( minDR<0.3 ) photonMatchingJetIndx=minDRindx;
    for(int i=0;i<hadJets.size();i++){
      if( (abs(hadJets[i].Eta()) < 2.4) ){ST=ST+(hadJets[i].Pt());}
      if( (abs(hadJets[i].Eta()) < 2.4) ){nHadJets++;}
    }
    if( minDR<0.3 ){
      ST=ST+bestPhoton.Pt();
    }
    // if( !((ST>800 && bestPhoton.Pt()>100) || (bestPhoton.Pt()>190)) )  continue;
    if(ST < 300) continue;
    if( nHadJets < 2 ) continue;
    //    if( !(nHadJets >= 2 && nHadJets <= 4)) continue;
    //    if( !(nHadJets >= 5 && nHadJets <= 6)) continue;
    //    if( !(nHadJets >= 7) ) continue; 
    double dPhi_METjet1=5, dPhi_METjet2=5;
    dPhi_METjet1 = abs(DeltaPhi(METPhi,(hadJets)[0].Phi()));
    dPhi_METjet2 = abs(DeltaPhi(METPhi,(hadJets)[1].Phi()));

    //Minimum dPhi cut between MET and leading two jets                                                                                                      
    if(!(dPhi_METjet1 > 0.3 && dPhi_METjet2 > 0.3 )) continue;

    //    if (!(NElectrons == 0 && NMuons == 0 )) continue;
    //if(!(isoElectronTracks==0 && isoMuonTracks ==0 && isoPionTracks==0)) continue;

    passTrg=true;
    // if (MET < 250) continue;
    if(passTrg){
      h_ST->Fill(ST,wt);
      h_MET->Fill(MET,wt);
      h_nHadJets->Fill(nHadJets,wt);
      h_BTags->Fill(BTags,wt);
      h_BestPhotonPt->Fill(bestPhoton.Pt(),wt);
      h_HT->Fill(HT,wt);
      h_MHT->Fill(MHT,wt);
      h_nJets->Fill(NJets,wt);
      h_METvBin->Fill(MET,wt);
      h_METvBin2->Fill(MET,wt);
      h_METvBin3->Fill(MET,wt);
      if((nHadJets >= 2 && nHadJets <= 4)) h_METvBin_nj2->Fill(MET,wt);                                                                                                 
      if((nHadJets >= 5 && nHadJets <= 6)) h_METvBin_nj5->Fill(MET,wt);
      if((nHadJets >= 7)) h_METvBin_nj7->Fill(MET,wt);
      h_STvBin->Fill(ST,wt);
      h_BestPhotonPt_vBin->Fill(bestPhoton.Pt(),wt);
      h_BestPhotonPt_vBin2->Fill(bestPhoton.Pt(),wt);
      h_HTvBin->Fill(HT,wt);
      // h2_PhoPtST->Fill(bestPhoton.Pt(),ST,wt);
      deno++;
      if(passTrg && passReqTrg){
	//     if(passTrg && (passReqTrg || passHTxPhoTrg) ){
        h_ST_Req->Fill(ST,wt);
	h_MET_Req->Fill(MET,wt);
	h_METvBin_Req->Fill(MET,wt);
        h_METvBin2_Req->Fill(MET,wt);
        h_METvBin3_Req->Fill(MET,wt);
	if((nHadJets >= 2 && nHadJets <= 4)) h_METvBin_nj2_Req->Fill(MET,wt);
	if((nHadJets >= 5 && nHadJets <= 6)) h_METvBin_nj5_Req->Fill(MET,wt);
	if((nHadJets >= 7)) h_METvBin_nj7_Req->Fill(MET,wt);

        h_nHadJets_Req->Fill(nHadJets,wt);
	h_BTags_Req->Fill(BTags,wt);
	h_BestPhotonPt_Req->Fill(bestPhoton.Pt(),wt);
	h_HT_Req->Fill(HT,wt);
	h_MHT_Req->Fill(MHT,wt);
	h_nJets_Req->Fill(NJets,wt);
        h_STvBin_Req->Fill(ST,wt);
	h_BestPhotonPt_vBin_Req->Fill(bestPhoton.Pt(),wt);
	h_BestPhotonPt_vBin2_Req->Fill(bestPhoton.Pt(),wt);
	h_HTvBin_Req->Fill(HT,wt);
	// h2_PhoPtST_Req->Fill(bestPhoton.Pt(),ST,wt);
	num++;
      }

    }

    //    newtree->Fill();
    
  }// loop over entries
  //  newtree->AutoSave();

  cout<<" Events passing through METxHT triggers = "<<num<<endl;
  cout<<" Events passing through HT triggers = "<<deno<<endl;
}

TLorentzVector Single_elec::getBestPhoton_0(){
  int bestPhoIndx=-100;
  TLorentzVector v1;
  vector<TLorentzVector> goodPho;
  for(int iPhoton=0;iPhoton<Photons->size();iPhoton++){
    if( ((*Photons_fullID)[iPhoton]) && ((*Photons_hasPixelSeed)[iPhoton]<0.001) ) goodPho.push_back( (*Photons)[iPhoton] );
  }

  if(goodPho.size()==0) return v1;
  else if(goodPho.size()==1) return goodPho[0];
  else{
    for(int i=0;i<goodPho.size();i++){
      if(i==0) bestPhoIndx=0;
      else if(goodPho[bestPhoIndx].Pt() < goodPho[i].Pt()) bestPhoIndx=i;
    }
    return goodPho[bestPhoIndx];
  }
}

TLorentzVector Single_elec::getBestPhoton(){
  vector<TLorentzVector> goodPho;
  vector<int> goodPhoIndx;
  for(int iPho=0;iPho<Photons->size();iPho++){
    if( (*Photons_fullID)[iPho] ) {
      goodPho.push_back( (*Photons)[iPho] );
      goodPhoIndx.push_back(iPho);
    }
  }
  
  int highPtIndx=-100;
  for(int i=0;i<goodPho.size();i++){
    if(i==0) highPtIndx=0;
    else if( (goodPho[highPtIndx].Pt()) < (goodPho[i].Pt()) ){highPtIndx=i;}
  }
  
  if(highPtIndx>=0){
    bestPhotonIndxAmongPhotons = goodPhoIndx[highPtIndx];
  }
  else bestPhotonIndxAmongPhotons = -100;
  if(highPtIndx==-100){TLorentzVector v0;return v0;}
  else return goodPho[highPtIndx];
}
/*
int Single_elec::getBinNoV7(int nHadJets){
  int sBin=-100,m_i=0;
  if(nHadJets==2  || nHadJets==4)     { sBin=1;}
  else if((nHadJets==5 || nHadJets==6)){ sBin=2;}
  else if(nHadJets>=7)   { sBin=3;}
  return sBin;
}

int Single_elec::getBinNoV7(int nHadJets){
  int sBin=-100,m_i=0;
  if(nHadJets==2  || nHadJets==4)     { sBin=1;}
  else if((nHadJets==5 || nHadJets==6)){ sBin=2;}
  else if(nHadJets>=7)   { sBin=3;}
  return sBin;
}
*/

/*
  int bestPhoIndx=-100;
  TLorentzVector v1;
  vector<TLorentzVector> goodPho;
  for(int iPhoton=0;iPhoton<Photons->size();iPhoton++){
    if( (*Photons_fullID)[iPhoton] ) goodPho.push_back( (*Photons)[iPhoton] );
  }

  if(goodPho.size()==0) return v1;
  else if(goodPho.size()==1) return goodPho[0];
  else{
    for(int i=0;i<goodPho.size();i++){
      if(i==0) bestPhoIndx=0;
      else if(goodPho[bestPhoIndx].Pt() < goodPho[i].Pt()) bestPhoIndx=i;
    }
    return goodPho[bestPhoIndx];
  }
*/
double Single_elec::getGenLep(TLorentzVector bestPhoton){//MC only                                                                                                     
  vector<TLorentzVector> v_genLep2;
  TLorentzVector genMu1, genEle1;
  for(int i=0 ; i < GenElectrons->size(); i++)
    {
      if((*GenElectrons)[i].Pt()!=0)
        {
          genEle1 = ((*GenElectrons)[i]);
          v_genLep2.push_back(genEle1);
        }

    }
  for(int i=0 ; i < GenMuons->size(); i++)
    {
      if((*GenMuons)[i].Pt()!=0)
	{
          genMu1 = ((*GenMuons)[i]);
          v_genLep2.push_back(genMu1);
        }
    }
  return MinDr(bestPhoton,v_genLep2);
}

